"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowRunQuery = void 0;
const tslib_1 = require("tslib");
const graphql_tag_1 = tslib_1.__importDefault(require("graphql-tag"));
const client_1 = require("../client");
exports.WorkflowRunQuery = {
    async byIdAsync(graphqlClient, workflowRunId, { useCache = true } = {}) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query WorkflowRunById($workflowRunId: ID!) {
              workflowRuns {
                byId(workflowRunId: $workflowRunId) {
                  id
                  status
                }
              }
            }
          `, { workflowRunId }, {
            requestPolicy: useCache ? 'cache-first' : 'network-only',
            additionalTypenames: ['WorkflowRun'],
        })
            .toPromise());
        return data.workflowRuns.byId;
    },
    async withJobsByIdAsync(graphqlClient, workflowRunId, { useCache = true } = {}) {
        const data = await (0, client_1.withErrorHandlingAsync)(graphqlClient
            .query((0, graphql_tag_1.default) `
            query WorkflowRunByIdWithJobs($workflowRunId: ID!) {
              workflowRuns {
                byId(workflowRunId: $workflowRunId) {
                  id
                  name
                  status
                  createdAt

                  workflow {
                    id
                    name
                    fileName
                  }

                  jobs {
                    id
                    key
                    name
                    type
                    status
                    outputs
                    createdAt
                  }
                }
              }
            }
          `, { workflowRunId }, {
            requestPolicy: useCache ? 'cache-first' : 'network-only',
            additionalTypenames: ['WorkflowRun'],
        })
            .toPromise());
        return data.workflowRuns.byId;
    },
};
